/*
// Gebruiker Centraal - blogberichten.less
// ----------------------------------------------------------------------------------
// Extra styling voor archive-pages
// ----------------------------------------------------------------------------------
// @package gebruiker-centraal
// @author  Paul van Buuren
// @license GPL-2.0+
// @version 4.1.6
// @desc.   Separate CSS files restored. Login form slightly retouched.
// @link    https://github.com/ICTU/gebruiker-centraal-wordpress-theme
*/
/*
 * Abstracts
 * Variables, mixins, extendables - things we use everywhere
 */
/* Typografie */
/* Default variables for textblocks */
#maincontent .has-header-image {
  max-width: 1440px;
  margin: 0 auto;
}
#maincontent .has-header-image + .content article.entry {
  margin-top: 0;
}
#maincontent .has-header-image + .content article.entry .entry-title {
  font-size: 40px;
  font-size: 4rem;
  text-transform: none;
}
@media only screen and (min-width: 650px) {
  #maincontent .has-header-image + .content article.entry .entry-title {
    font-size: 44px;
    font-size: 4.4rem;
    line-height: 48px;
  }
}
@media only screen and (min-width: 960px) {
  #maincontent .has-header-image + .content article.entry .entry-title {
    font-size: 68px;
    font-size: 6.8rem;
    line-height: 76px;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2Zyb250ZW5kLzxpbnB1dCBjc3MgODg+IiwiYmxvZ2JlcmljaHRlbi5sZXNzIiwiYWJzdHJhY3RzL19taXhpbnMubGVzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7RUFXRTtBQUNGOzs7R0FHRztBQUNILGdCQUFnQjtBQUNoQixzQ0FBc0M7QUNTdEM7RUFDQyxrQkFBQTtFQUNBLGVBQUE7Q0RQQTtBQ1NDO0VBQ0MsY0FBQTtDRFBGO0FDTUM7RUNxRkEsZ0JBQUE7RUFDQSxnQkFBQTtFRGhGRSxxQkFBQTtDRFBIO0FDU0c7RUFBQTtJQzZFRixnQkFBQTtJQUNBLGtCQUFBO0lENUVHLGtCQUFBO0dETEY7Q0FDRjtBQ09HO0VBQUE7SUN3RUYsZ0JBQUE7SUFDQSxrQkFBQTtJRHZFRyxrQkFBQTtHREhGO0NBQ0YiLCJmaWxlIjoiYmxvZ2JlcmljaHRlbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuLy8gR2VicnVpa2VyIENlbnRyYWFsIC0gYmxvZ2JlcmljaHRlbi5sZXNzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHRyYSBzdHlsaW5nIHZvb3IgYXJjaGl2ZS1wYWdlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQHBhY2thZ2UgZ2VicnVpa2VyLWNlbnRyYWFsXG4vLyBAYXV0aG9yICBQYXVsIHZhbiBCdXVyZW5cbi8vIEBsaWNlbnNlIEdQTC0yLjArXG4vLyBAdmVyc2lvbiA0LjEuNlxuLy8gQGRlc2MuICAgU2VwYXJhdGUgQ1NTIGZpbGVzIHJlc3RvcmVkLiBMb2dpbiBmb3JtIHNsaWdodGx5IHJldG91Y2hlZC5cbi8vIEBsaW5rICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9JQ1RVL2dlYnJ1aWtlci1jZW50cmFhbC13b3JkcHJlc3MtdGhlbWVcbiovXG4vKlxuICogQWJzdHJhY3RzXG4gKiBWYXJpYWJsZXMsIG1peGlucywgZXh0ZW5kYWJsZXMgLSB0aGluZ3Mgd2UgdXNlIGV2ZXJ5d2hlcmVcbiAqL1xuLyogVHlwb2dyYWZpZSAqL1xuLyogRGVmYXVsdCB2YXJpYWJsZXMgZm9yIHRleHRibG9ja3MgKi9cbiNtYWluY29udGVudCAuaGFzLWhlYWRlci1pbWFnZSB7XG4gIG1heC13aWR0aDogMTQ0MHB4O1xuICBtYXJnaW46IDAgYXV0bztcbn1cbiNtYWluY29udGVudCAuaGFzLWhlYWRlci1pbWFnZSArIC5jb250ZW50IGFydGljbGUuZW50cnkge1xuICBtYXJnaW4tdG9wOiAwO1xufVxuI21haW5jb250ZW50IC5oYXMtaGVhZGVyLWltYWdlICsgLmNvbnRlbnQgYXJ0aWNsZS5lbnRyeSAuZW50cnktdGl0bGUge1xuICBmb250LXNpemU6IDQwcHg7XG4gIGZvbnQtc2l6ZTogNHJlbTtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY1MHB4KSB7XG4gICNtYWluY29udGVudCAuaGFzLWhlYWRlci1pbWFnZSArIC5jb250ZW50IGFydGljbGUuZW50cnkgLmVudHJ5LXRpdGxlIHtcbiAgICBmb250LXNpemU6IDQ0cHg7XG4gICAgZm9udC1zaXplOiA0LjRyZW07XG4gICAgbGluZS1oZWlnaHQ6IDQ4cHg7XG4gIH1cbn1cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTYwcHgpIHtcbiAgI21haW5jb250ZW50IC5oYXMtaGVhZGVyLWltYWdlICsgLmNvbnRlbnQgYXJ0aWNsZS5lbnRyeSAuZW50cnktdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogNjhweDtcbiAgICBmb250LXNpemU6IDYuOHJlbTtcbiAgICBsaW5lLWhlaWdodDogNzZweDtcbiAgfVxufVxuIiwiLypcbi8vIEdlYnJ1aWtlciBDZW50cmFhbCAtIGJsb2diZXJpY2h0ZW4ubGVzc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXh0cmEgc3R5bGluZyB2b29yIGFyY2hpdmUtcGFnZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEBwYWNrYWdlIGdlYnJ1aWtlci1jZW50cmFhbFxuLy8gQGF1dGhvciAgUGF1bCB2YW4gQnV1cmVuXG4vLyBAbGljZW5zZSBHUEwtMi4wK1xuLy8gQHZlcnNpb24gNC4xLjZcbi8vIEBkZXNjLiAgIFNlcGFyYXRlIENTUyBmaWxlcyByZXN0b3JlZC4gTG9naW4gZm9ybSBzbGlnaHRseSByZXRvdWNoZWQuXG4vLyBAbGluayAgICBodHRwczovL2dpdGh1Yi5jb20vSUNUVS9nZWJydWlrZXItY2VudHJhYWwtd29yZHByZXNzLXRoZW1lXG4qL1xuXG4vKlxuICogQWJzdHJhY3RzXG4gKiBWYXJpYWJsZXMsIG1peGlucywgZXh0ZW5kYWJsZXMgLSB0aGluZ3Mgd2UgdXNlIGV2ZXJ5d2hlcmVcbiAqL1xuXG5AaW1wb3J0IFwiYWJzdHJhY3RzL19mb250cy5sZXNzXCI7XG5AaW1wb3J0IFwiYWJzdHJhY3RzL192YXJpYWJsZXMubGVzc1wiO1xuQGltcG9ydCBcImFic3RyYWN0cy9fbWl4aW5zLmxlc3NcIjtcbkBpbXBvcnQgXCJhYnN0cmFjdHMvX25vcm1hbGl6ZS5sZXNzXCI7XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBcbi8vIFxuXG4jbWFpbmNvbnRlbnQgLmhhcy1oZWFkZXItaW1hZ2Uge1xuXHRtYXgtd2lkdGg6IDE0NDBweDsgLy8gdm9vciBkaWUgbWFjYm9va2x1aXRqZXMgb25kZXIgb25zLi4uIFxuXHRtYXJnaW46IDAgYXV0bztcblx0KyAuY29udGVudCB7XG5cdFx0JiBhcnRpY2xlLmVudHJ5IHtcblx0XHRcdG1hcmdpbi10b3A6IDA7XG5cdFx0XHRcblx0XHRcdC5lbnRyeS10aXRsZSB7XG5cdFx0XHRcblx0XHRcdFx0LmZvbnQtc2l6ZSg0MCk7XG5cdFx0XHRcdHRleHQtdHJhbnNmb3JtOiBub25lO1xuXHRcdFx0XG5cdFx0XHRcdEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKCBtaW4td2lkdGg6IEBicmVha190YWJsZXQgKSB7XG5cdFx0XHRcdFx0LmZvbnQtc2l6ZSg0NCk7XG5cdFx0XHRcdFx0bGluZS1oZWlnaHQ6IDQ4cHg7XG5cdFx0XHRcdH1cblx0XHRcdFxuXHRcdFx0XHRAbWVkaWEgb25seSBzY3JlZW4gYW5kICggbWluLXdpZHRoOiBAYnJlYWtfZnVsbHdpZHRoICkge1xuXHRcdFx0XHRcdC5mb250LXNpemUoNjgpO1xuXHRcdFx0XHRcdGxpbmUtaGVpZ2h0OiA3NnB4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cblxuIiwiXG4vLyBHZWJydWlrZXIgQ2VudHJhYWwgLSBfbWl4aW5zLmxlc3Ncbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGJldmF0IG1peGlucyBlbiBrbGV1cmVuIGVuIGJyZWVkdGVzIGVuIGdyb290dGVzIGV0Yy5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEBwYWNrYWdlIGdlYnJ1aWtlci1jZW50cmFhbFxuLy8gQGF1dGhvciAgUGF1bCB2YW4gQnV1cmVuXG4vLyBAbGljZW5zZSBHUEwtMi4wK1xuLy8gQHZlcnNpb24gMy4yOS4xXG4vLyBAZGVzYy4gICBQdWJsaWMgU2VydmljZSBub21pbmF0aWUtd2lkZ2V0IG9wIGhvbWVwYWdlLlxuLy8gQGxpbmsgICAgaHR0cHM6Ly9naXRodWIuY29tL0lDVFUvZ2VicnVpa2VyLWNlbnRyYWFsLXdvcmRwcmVzcy10aGVtZVxuXG5cbkBpbXBvcnQgXCJfdmFyaWFibGVzLmxlc3NcIjtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4ubWVzc19vaygpIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogQG1lc3Nfb2tfYmc7XG4gIGJvcmRlcjogMXB4IHNvbGlkIEBtZXNzX29rX2JvcmRlcjtcbiAgY29sb3I6IEB0eHQ7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLm1lc3NfZXJyb3IoKSB7XG4gIGJhY2tncm91bmQtY29sb3I6IEBtZXNzX2Vycm9yX2JnO1xuICBib3JkZXI6IDFweCBzb2xpZCBAbWVzc19lcnJvcl9ib3JkZXI7XG4gIGNvbG9yOiBAdHh0O1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBtaXhpbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmJ1dHRvbl9zaGFyZWRfcGlqbHRqZV8xKCkge1xuICBiYWNrZ3JvdW5kOiBAYnV0dG9uLW5vcm1hbCB1cmwoJ2ltYWdlcy9pY29uLWtub3AtZ3JvZW4uc3ZnJykgbm8tcmVwZWF0IHJpZ2h0IGNlbnRlcjtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uYnV0dG9uX3NoYXJlZF9waWpsdGplXzFfaG92ZXIoKSB7XG4gIGJhY2tncm91bmQ6IEB3aXQgdXJsKCdpbWFnZXMvaWNvbi1rbm9wLWdyb2VuLWhvdmVyLnN2ZycpIG5vLXJlcGVhdCByaWdodCBjZW50ZXI7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmJ1dHRvbl9mb250X3NoYXJlZChAZm9udHNpemU6IDE4KSB7XG4gIGZvbnQtZmFtaWx5OiBAaGVhZGVyZm9udDtcbiAgLmZvbnRzaXplKEBmb250c2l6ZSk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBAYnJlYWtfdGFibGV0ICkge1xuICAgIC5mb250c2l6ZSggKCBAZm9udHNpemUgLyAxLjI1ICkgKTtcbiAgfVxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICggQGJyZWFrX3RhYmxldCArIDEgKSApIHtcbiAgICBsaW5lLWhlaWdodDogMjtcbiAgICAuZm9udHNpemUoQGZvbnRzaXplKTtcbiAgfVxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5idXR0b24tc2hhcmVkKCkge1xuXG4gIGJveC1zaGFkb3c6IG5vbmU7XG4gIGNvbG9yOiBAd2l0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIHdpZHRoOiBhdXRvO1xuICAuaW5wdXRwYWRkaW5nKCk7XG4gIGJvcmRlcjogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBwYWRkaW5nOiAoIEBwYWRkaW5nIC8gMiApIDQ2cHggKCBAcGFkZGluZyAvIDIgKSBAcGFkZGluZztcbiAgYm9yZGVyLXJhZGl1czogMDtcbiAgLmJ1dHRvbl9zaGFyZWRfcGlqbHRqZV8xKCk7XG5cbiAgLmJ1dHRvbl9mb250X3NoYXJlZCgpO1xuXG4gICY6aG92ZXIsXG4gICY6YWN0aXZlLFxuICAmOmZvY3VzIHtcbiAgICAvL1x0XHRjb2xvcjogQGJ1dHRvbi1ub3JtYWw7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgLy9cdFx0LmJ1dHRvbl9zaGFyZWRfcGlqbHRqZV8xX2hvdmVyKCk7XG4gICAgLy9cdFx0Y29sb3I6IEB3aXQ7XG4gICAgLy9cdFx0YmFja2dyb3VuZC1jb2xvcjogQHR4dDtcbiAgICBjb2xvcjogQHR4dDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAd2l0O1xuICAgIGJvcmRlci1jb2xvcjogQGdjX2ExMXlfZ3JlZW47XG5cbiAgICAmOmFmdGVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IEB0eHQ7XG4gICAgICAucGlqbHRqZV93aXQoJy4uL2ltYWdlcy9hcnJvdy13aXQuc3ZnJywgQHdpdCApO1xuICAgIH1cblxuXG4gIH1cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uaW5wdXRib3JkZXItc2hhcmVkKCkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBAd2l0O1xuICBib3gtc2hhZG93OiAxcHggMXB4IDNweCAjZWVlIGluc2V0O1xuICBjb2xvcjogQHR4dDtcbiAgLmZvbnRzaXplKDE0KTtcbiAgLmlucHV0cGFkZGluZygpO1xuICAuaW5wdXRib3JkZXIoKTtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmZvbnQtc2l6ZShAaW5wdXQpIHtcbiAgLy9cdGZvbnQtc2l6ZTogKCAoICggQGlucHV0IC8gQGJhc2Vmb250c2l6ZSApICogQGJhc2Vmb250c2l6ZSApICogQHBpeGVsICk7XG4gIGZvbnQtc2l6ZTogKCAoICggQGlucHV0IC8gQGJhc2Vmb250c2l6ZSApICogQGJhc2Vmb250c2l6ZSApICogQHBpeGVsICk7XG4gIGZvbnQtc2l6ZTogKCAoIEBpbnB1dCAvIEBiYXNlZm9udHNpemUgKSAqIEBwcmVtICk7XG5cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uZm9udHNpemUoIEBzaXplVmFsdWU6IDE2ICkge1xuICBAcHhWYWx1ZTogKEBzaXplVmFsdWUgKiAxKTtcbiAgQHJlbVZhbHVlOiAoQHNpemVWYWx1ZSAvIDEwKTtcbiAgZm9udC1zaXplOiB+XCJAe3B4VmFsdWV9cHhcIjtcbiAgZm9udC1zaXplOiB+XCJAe3JlbVZhbHVlfXJlbVwiO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5pbnB1dGJvcmRlcigpIHtcbiAgYm9yZGVyOiAycHggc29saWQgQHR4dDtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uaW5wdXRwYWRkaW5nKCkge1xuICBwYWRkaW5nOiAoIEBwYWRkaW5nIC8gMiApO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi50ZXN0YmcoQHRlc3Rjb2xvcjogJyNmMDAnKSB7XG4gIC8vICAgIGJhY2tncm91bmQ6IEB0ZXN0Y29sb3I7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLnZpc3VhbGx5aGlkZGVuKCkge1xuXHRib3JkZXI6IDA7XG5cdGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcblx0aGVpZ2h0OiAxcHg7XG5cdHdpZHRoOiAxcHg7XG5cdG1hcmdpbjogLTFweDtcblx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0cGFkZGluZzogMDtcblx0cG9zaXRpb246IGFic29sdXRlO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5hY3RpdmUtbWVudSgpIHtcbiAgLy8gICAgY29sb3I6IEB3aXQ7XG4gIGJvcmRlci1jb2xvcjogQG1lbnVfYWN0aXZlO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5ib2xkLWZvbnQoKSB7XG4gIC8vICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGZvbnQtZmFtaWx5OiBAYm9keWZvbnRfYm9sZDtcbiAgLy8gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5rbm9wcGlmeShcbiAgQGJvcmRlcmNvbG9yOiBAZ2NfYmx1ZV9kYXJrZXIsXG4gIEBib3hfc2hhZG93OiBAZ2NfYmx1ZV9kYXJrZXIsXG4gIEBjdGFjb2xvcjogQGdjX2JsdWVfZGFya2VyLFxuICBAYmdfY29sb3I6IHRyYW5zcGFyZW50LFxuICBAZm9udGNvbG9yOiBAd2l0LFxuICBAZm9udHNpemU6IDMyLFxuICBAYm9yZGVyd2lkdGg6IDFweCxcbiAgQGNvbG9yX2Fycm93OiBAd2l0LFxuICBAYmdfY29sb3JfdHh0X2hvdmVyOiBAZ2NfYmx1ZV9kYXJrLFxuICBAYmdfY29sb3JfYWZ0ZXJfaG92ZXI6IEBnY19ibHVlX2Rhcmtlc3QsXG4gIEB0eHRfY29sb3JfaG92ZXI6IEB3aXQgKSB7XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogQGJnX2NvbG9yO1xuICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJvcmRlcjogQGJvcmRlcndpZHRoIHNvbGlkIEBib3JkZXJjb2xvcjtcbiAgYm94LXNoYWRvdzogM3B4IDNweCAwcHggcmdiYSgjMDAwLCAwLjIpO1xuXG4gIC5idXR0b25fZm9udF9zaGFyZWQoQGZvbnRzaXplKTtcbiAgY29sb3I6IEBmb250Y29sb3I7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuICBwYWRkaW5nLWxlZnQ6IC43NWVtO1xuICBwYWRkaW5nLXJpZ2h0OiAyZW07XG5cbiAgJjphZnRlciB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogMDtcbiAgICBjb250ZW50OiAnICc7XG4gICAgd2lkdGg6IDEuMjVlbTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIGJhY2tncm91bmQ6IEBjdGFjb2xvciB1cmwoJy4uL2ltYWdlcy9hcnJvdy13aXQuc3ZnJykgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXI7XG4gICAgLnBpamx0amVfd2l0KCcuLi9pbWFnZXMvYXJyb3ctd2l0LnN2ZycsIEBjb2xvcl9hcnJvdyk7XG4gIH1cblxuICAmOmhvdmVyLFxuICAmOmZvY3VzLFxuICAmOmFjdGl2ZSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgYm9yZGVyLWNvbG9yOiBAdHh0O1xuICAgIGNvbG9yOiBAdHh0X2NvbG9yX2hvdmVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6IEBiZ19jb2xvcl90eHRfaG92ZXI7XG5cbiAgICAmOmFmdGVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IEBiZ19jb2xvcl9hZnRlcl9ob3ZlcjtcbiAgICAgIC5waWpsdGplX3dpdCgnLi4vaW1hZ2VzL2Fycm93LXdpdC5zdmcnLCBAY29sb3JfYXJyb3cpO1xuICAgIH1cbiAgfVxuXG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5pY29uX3RpbWVfZmlsbChAc3JjLCBAZmlsbC1uZXcpIHtcbiAgQGRhdGEtdXJpOiAgICAgICBkYXRhLXVyaSgnaW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PVVURi04JywgXCJAe3NyY31cIik7XG4gIEByZXBsYWNlLWRlZmF1bHQ6ICAgZXNjYXBlKCdpZD1cImljb24tcGluXCIgZmlsbD1cIiMxYmIyNGJcIicpO1xuICBAcmVwbGFjZS1uZXc6ICAgICBlc2NhcGUoJ2lkPVwiaWNvbi1waW5cIiBmaWxsPVwiQHtmaWxsLW5ld31cIicpO1xuICBAcmVwbGFjZXNyYzE6ICAgICByZXBsYWNlKFwiQHtkYXRhLXVyaX1cIiwgQHJlcGxhY2UtZGVmYXVsdCwgQHJlcGxhY2UtbmV3LCBcImdcIik7XG5cbiAgYmFja2dyb3VuZC1pbWFnZTogZShAcmVwbGFjZXNyYzEpO1xufVxuXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5pY29uX3NvY21lZF9pY29uKEBzcmMsIEBmaWxsLW5ldykge1xuICBAZGF0YS11cmk6ICAgICAgICAgIGRhdGEtdXJpKCdpbWFnZS9zdmcreG1sO2NoYXJzZXQ9VVRGLTgnLCBcIkB7c3JjfVwiKTtcbiAgQHJlcGxhY2UtZGVmYXVsdDogICBlc2NhcGUoJ2ZpbGw9XCIjMDA1ODZmXCInKTtcbiAgQHJlcGxhY2UtbmV3OiAgICAgICBlc2NhcGUoJ2ZpbGw9XCJAe2ZpbGwtbmV3fVwiJyk7XG4gIEByZXBsYWNlc3JjMTogICAgICAgcmVwbGFjZShcIkB7ZGF0YS11cml9XCIsIEByZXBsYWNlLWRlZmF1bHQsIEByZXBsYWNlLW5ldywgXCJnXCIpO1xuXG4gIGJhY2tncm91bmQtaW1hZ2U6IGUoQHJlcGxhY2VzcmMxKTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmljb25fcGluX2ZpbGwoQHNyYywgQGZpbGwtbmV3KSB7XG4gIEBkYXRhLXVyaTogICAgICAgZGF0YS11cmkoJ2ltYWdlL3N2Zyt4bWw7Y2hhcnNldD1VVEYtOCcsIFwiQHtzcmN9XCIpO1xuICBAcmVwbGFjZS1kZWZhdWx0OiAgIGVzY2FwZSgnZmlsbD1cIiMxYmIyNGJcIicpO1xuICBAcmVwbGFjZS1uZXc6ICAgICBlc2NhcGUoJ2ZpbGw9XCJAe2ZpbGwtbmV3fVwiJyk7XG4gIEByZXBsYWNlc3JjMTogICAgIHJlcGxhY2UoXCJAe2RhdGEtdXJpfVwiLCBAcmVwbGFjZS1kZWZhdWx0LCBAcmVwbGFjZS1uZXcsIFwiZ1wiKTtcblxuICBiYWNrZ3JvdW5kLWltYWdlOiBlKEByZXBsYWNlc3JjMSk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5pY29uX3JlcGxhY2VfZmlsbGVyKEBzcmMsIEBmaWxsLW9sZCwgQGZpbGwtbmV3KSB7XG4gIEBkYXRhLXVyaTogICAgICAgICAgZGF0YS11cmkoJ2ltYWdlL3N2Zyt4bWw7Y2hhcnNldD1VVEYtOCcsIFwiQHtzcmN9XCIpO1xuICBAcmVwbGFjZS1kZWZhdWx0OiAgIGVzY2FwZSgnZmlsbD1cIkB7ZmlsbC1vbGR9XCInKTtcbiAgQHJlcGxhY2UtbmV3OiAgICAgICBlc2NhcGUoJ2ZpbGw9XCJAe2ZpbGwtbmV3fVwiJyk7XG4gIEByZXBsYWNlc3JjMTogICAgICAgcmVwbGFjZShcIkB7ZGF0YS11cml9XCIsIEByZXBsYWNlLWRlZmF1bHQsIEByZXBsYWNlLW5ldywgXCJnXCIpO1xuICBiYWNrZ3JvdW5kLWltYWdlOiBlKEByZXBsYWNlc3JjMSk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5pY29uX3NlcGFyYXRvcl9maWxsKEBzcmMsIEBmaWxsLW5ldykge1xuICBAZGF0YS11cmk6ICAgICAgIFx0ZGF0YS11cmkoJ2ltYWdlL3N2Zyt4bWw7Y2hhcnNldD1VVEYtOCcsIFwiQHtzcmN9XCIpO1xuICBAcmVwbGFjZS1kZWZhdWx0Olx0ZXNjYXBlKCdmaWxsPVwiIzAwOWYzM1wiJyk7XG4gIEByZXBsYWNlLW5ldzogICAgIFx0ZXNjYXBlKCdmaWxsPVwiQHtmaWxsLW5ld31cIicpO1xuICBAcmVwbGFjZXNyYzE6ICAgICBcdHJlcGxhY2UoXCJAe2RhdGEtdXJpfVwiLCBAcmVwbGFjZS1kZWZhdWx0LCBAcmVwbGFjZS1uZXcsIFwiZ1wiKTtcbiAgYmFja2dyb3VuZC1pbWFnZTogZShAcmVwbGFjZXNyYzEpO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uaWNvbmFkZGJ1bGxldChAc3JjLCBAZmlsbC1uZXcpIHtcblxuICBAZGF0YS11cmk6ICAgICAgICAgIGRhdGEtdXJpKCdpbWFnZS9zdmcreG1sO2NoYXJzZXQ9VVRGLTgnLCBcIkB7c3JjfVwiKTtcblxuICBAcmVwbGFjZS1kZWZhdWx0OiAgIGVzY2FwZSgnZmlsbD1cIiMwMDJGM0VcIicpO1xuICBAcmVwbGFjZS1uZXc6ICAgICAgIGVzY2FwZSgnZmlsbD1cIkB7ZmlsbC1uZXd9XCInKTtcbiAgQHJlcGxhY2Utc3JjOiAgICAgICByZXBsYWNlKFwiQHtkYXRhLXVyaX1cIiwgQHJlcGxhY2UtZGVmYXVsdCwgQHJlcGxhY2UtbmV3LCBcImdcIik7XG5cbiAgbGlzdC1zdHlsZS1pbWFnZTogZShAcmVwbGFjZS1zcmMpO1xuXG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5waWpsdGplX3dpdChAc3JjLCBAZmlsbC1uZXcpIHtcblxuICBAZGF0YS11cmk6ICAgICAgICAgIGRhdGEtdXJpKCdpbWFnZS9zdmcreG1sO2NoYXJzZXQ9VVRGLTgnLCBcIkB7c3JjfVwiKTtcblxuICBAcmVwbGFjZS1kZWZhdWx0OiAgIGVzY2FwZSgnZmlsbD1cIiNmZmZcIicpO1xuICBAcmVwbGFjZS1uZXc6ICAgICAgIGVzY2FwZSgnZmlsbD1cIkB7ZmlsbC1uZXd9XCInKTtcbiAgQHJlcGxhY2Utc3JjOiAgICAgICByZXBsYWNlKFwiQHtkYXRhLXVyaX1cIiwgQHJlcGxhY2UtZGVmYXVsdCwgQHJlcGxhY2UtbmV3LCBcImdcIik7XG5cbiAgYmFja2dyb3VuZC1pbWFnZTogZShAcmVwbGFjZS1zcmMpO1xuXG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5zdGFuZGFyZGJveHNoYWRvdygpIHtcbiAgYm94LXNoYWRvdzogMnB4IDJweCA1cHggbGlnaHRlbihAdHh0X2dyaWpzLCAzMCUpXG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5ldmVudGljb25zKCkge1xuXG4gIGRkICsgZHQgKyBkZCB7XG4gICAgbWFyZ2luLWxlZnQ6IDFyZW07XG4gIH1cblxuICAuZXZlbnQtYWFubWVsZGluZ2VuLFxuICAuZXZlbnQtcHJpY2luZyxcbiAgLmV2ZW50LXRpbWVzLFxuICAuZXZlbnQtdHlwZSxcbiAgLmV2ZW50LWxldmVsLFxuICAuZXZlbnQtbG9jYXRpb24ge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCB1cmwoJy4uL2ltYWdlcy9pY29uLXBpbi5wbmcnKSBuby1yZXBlYXQgbGVmdCBjZW50ZXI7XG4gIH1cbiAgLmV2ZW50LWFhbm1lbGRpbmdlbiB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWFnZXMvaWNvbi1jYWxlbmRhci5wbmcnKTtcbiAgICAuaWNvbl9waW5fZmlsbCgnLi4vaW1hZ2VzL2ljb24tY2FsZW5kYXIuc3ZnJywgQGdjX2ExMXlfZ3JlZW4gKTtcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gIH1cbiAgLmV2ZW50LXByaWNpbmcge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1hZ2VzL2ljb24tcHJpY2UucG5nJyk7XG4gICAgLmljb25fcGluX2ZpbGwoJy4uL2ltYWdlcy9pY29uLXByaWNlLnN2ZycsIEBnY19hMTF5X2dyZWVuICk7XG4gICAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuICB9XG4gIC5ldmVudC10aW1lcyB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWFnZXMvaWNvbi10aW1lLnBuZycpO1xuICAgIC5pY29uX3Bpbl9maWxsKCcuLi9pbWFnZXMvaWNvbi10aW1lLnN2ZycsIEBnY19hMTF5X2dyZWVuICk7XG4gICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICAgICYgKyAgLmV2ZW50LXRpbWVzIHtcbiAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgIGJhY2tncm91bmQ6IG5vbmU7XG4gICAgfVxuICB9XG4gIC5ldmVudC1sZXZlbCB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWFnZXMvaWNvbi1sZXZlbC5wbmcnKTtcbiAgICAuaWNvbl9waW5fZmlsbCgnLi4vaW1hZ2VzL2ljb24tbGV2ZWwuc3ZnJywgQGdjX2ExMXlfZ3JlZW4gKTtcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gICAgJiArICAuZXZlbnQtbGV2ZWwge1xuICAgICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICB9XG4gIH1cbiAgLmV2ZW50LXR5cGUge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1hZ2VzL2ljb24tdHlwZS5wbmcnKTtcbiAgICAuaWNvbl9waW5fZmlsbCgnLi4vaW1hZ2VzL2ljb24tdHlwZS5zdmcnLCBAZ2NfYTExeV9ncmVlbiApO1xuICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICAmICsgIC5ldmVudC10eXBlIHtcbiAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgIGJhY2tncm91bmQ6IG5vbmU7XG4gICAgfVxuICB9XG4gIC5ldmVudC1sb2NhdGlvbixcbiAgW2l0ZW1wcm9wPVwibG9jYXRpb25cIl0ge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1hZ2VzL2ljb24tcGluLnBuZycpO1xuICAgIC5pY29uX3Bpbl9maWxsKCcuLi9pbWFnZXMvaWNvbi1waW4uc3ZnJywgQGdjX2ExMXlfZ3JlZW4gKTtcbiAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG4gICAgJiArICAuZXZlbnQtbG9jYXRpb24ge1xuICAgICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICB9XG4gIH1cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmRhdGViYWRnZV9rbGVpbiggQGFjaHRlcmdyb25ka2xldXI6IEBnY19hMTF5X2dyZWVuLCBAd2lkdGg6IDNlbSkge1xuXG4gIGZsb2F0OiBsZWZ0O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGJvcmRlcjogMXB4IHNvbGlkIEBhY2h0ZXJncm9uZGtsZXVyO1xuICBwYWRkaW5nOiAzcHggM3B4IDZweCAzcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIG1hcmdpbi1yaWdodDogMWVtO1xuXG4gIHNwYW4ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGZsb2F0OiBub25lO1xuICAgIGNsZWFyOiBib3RoO1xuICAgIGNvbG9yOiBAdHh0O1xuICAgIC5mb250c2l6ZSgxMCk7XG4gICAgcGFkZGluZy1sZWZ0OiAuMTVlbTtcbiAgICBwYWRkaW5nLXJpZ2h0OiAuMTVlbTtcbiAgfVxuICAuZGFnIHtcbiAgICBmb250LWZhbWlseTogQGhlYWRlcmZvbnQ7XG4gICAgLmZvbnRzaXplKDI4KTtcblxuICAgICYubXVsdGlwbGUge1xuICAgICAgLmZvbnRzaXplKDIyKTtcbiAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgfVxuICB9XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5kYXRlYmFkZ2VfZ3Jvb3QoQGFjaHRlcmdyb25ka2xldXI6IEBnY19hMTF5X2dyZWVuLCBAd2lkdGg6IDNlbSwgQHRvcDogMCwgQGxlZnQ6IDApIHtcblxuICBiYWNrZ3JvdW5kOiBAYWNodGVyZ3JvbmRrbGV1cjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogQHdpZHRoO1xuICB6LWluZGV4OiA0MDA7XG4gIG1hcmdpbi1yaWdodDogQHBhZGRpbmc7XG4gIHRvcDogQHRvcDtcbiAgbGVmdDogQGxlZnQ7XG5cbiAgJiwgc3BhbiB7XG4gICAgY29sb3I6IEB3aXQ7XG4gIH1cbiAgLmRhZyB7XG4gICAgZm9udC1mYW1pbHk6IEBoZWFkZXJmb250O1xuICAgIHBhZGRpbmctdG9wOiA2cHg7XG4gICAgLmZvbnRzaXplKDM2KTtcbiAgICAmLm11bHRpcGxlIHtcbiAgICAgIC5mb250c2l6ZSgyNCk7XG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgcGFkZGluZy10b3A6IDEycHg7XG4gICAgICBwYWRkaW5nLWJvdHRvbTogNnB4O1xuICAgIH1cbiAgfVxuICAuamFhciB7XG4gICAgcGFkZGluZy1ib3R0b206IDZweDtcbiAgfVxuXG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcgJztcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDA7XG4gICAgaGVpZ2h0OiAwO1xuICAgIGJvcmRlci10b3A6IEBwaWpsZ3Jvb3R0ZSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItYm90dG9tOiBAcGlqbGdyb290dGUgc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWxlZnQ6IEBwaWpsZ3Jvb3R0ZSBzb2xpZCBAYWNodGVyZ3JvbmRrbGV1cjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAoIEBwaWpsZ3Jvb3R0ZSAqIDEgKTtcbiAgICByaWdodDogMDtcbiAgICBtYXJnaW4tcmlnaHQ6ICggLTEgKiBAcGlqbGdyb290dGUgKTtcbiAgICB6LWluZGV4OiA4ODg7XG4gIH1cblxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uc29jaWFsbWVkaWFfc3R5bGluZygpIHtcblxuICAuc29jaWFsLW1lZGlhIHtcblxuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcblxuICAgICYsIGxpIHtcbiAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICB9XG4gICAgbGkge1xuICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICBtYXJnaW46IDA7XG5cbiAgICAgIGEge1xuICAgICAgICAmLndlYnNpdGUsXG4gICAgICAgICYub3RoZXIsXG4gICAgICAgICYucGVyc29uYWxsaW5rLFxuICAgICAgICAmLmxpbmtlZGluLFxuICAgICAgICAmLmZhY2Vib29rLFxuICAgICAgICAmLnR3aXR0ZXIsXG4gICAgICAgICYuc2xhY2ssXG4gICAgICAgICYuZW1haWwge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IEB3aXQ7XG4gICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyO1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIEBsaWdodF9ncmF5O1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIHdpZHRoOiAyZW07XG4gICAgICAgICAgaGVpZ2h0OiAyZW07XG5cbiAgICAgICAgICAmOmhvdmVyLFxuICAgICAgICAgICY6YWN0aXZlLFxuICAgICAgICAgICY6Zm9jdXMge1xuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiBAdHh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLnR3aXR0ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2ltYWdlcy9pY29uLXR3aXR0ZXIucG5nJyk7XG4gICAgICAgIC5pY29uX3NvY21lZF9pY29uKCcuLi9pbWFnZXMvaWNvbi10d2l0dGVyLnN2ZycsIEBnY19ibHVlX2Rhcmtlc3QpO1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDE4cHggMTVweDtcblxuICAgICAgICAmOmhvdmVyLFxuICAgICAgICAmOmFjdGl2ZSxcbiAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgLmljb25fc29jbWVkX2ljb24oJy4uL2ltYWdlcy9pY29uLXR3aXR0ZXIuc3ZnJywgQGdjX2ExMXlfZ3JlZW4gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLnNsYWNrIHtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWFnZXMvaWNvbi1zbGFjay5wbmcnKTtcbiAgICAgICAgLmljb25fc29jbWVkX2ljb24oJy4uL2ltYWdlcy9pY29uLXNsYWNrLnN2ZycsIEBnY19ibHVlX2Rhcmtlc3QpO1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDE2cHggMTZweDtcblxuICAgICAgICAmOmhvdmVyLFxuICAgICAgICAmOmFjdGl2ZSxcbiAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgLmljb25fc29jbWVkX2ljb24oJy4uL2ltYWdlcy9pY29uLXNsYWNrLnN2ZycsIEBnY19hMTF5X2dyZWVuICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC5lbWFpbCB7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1hZ2VzL2ljb24tbWFpbC5wbmcnKTtcbiAgICAgICAgLmljb25fc29jbWVkX2ljb24oJy4uL2ltYWdlcy9pY29uLW1haWwuc3ZnJywgQGdjX2JsdWVfZGFya2VzdCk7XG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogMTZweCAxNnB4O1xuXG4gICAgICAgICY6aG92ZXIsXG4gICAgICAgICY6YWN0aXZlLFxuICAgICAgICAmOmZvY3VzIHtcbiAgICAgICAgICAuaWNvbl9zb2NtZWRfaWNvbignLi4vaW1hZ2VzL2ljb24tbWFpbC5zdmcnLCBAZ2NfYmx1ZV9kYXJrZXN0ICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC5mYWNlYm9vayB7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1hZ2VzL2ljb24tZmFjZWJvb2sucG5nJyk7XG4gICAgICAgIC5pY29uX3NvY21lZF9pY29uKCcuLi9pbWFnZXMvaWNvbi1mYWNlYm9vay5zdmcnLCBAZ2NfYmx1ZV9kYXJrZXN0KTtcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiAxMHB4IDE4cHg7XG5cbiAgICAgICAgJjpob3ZlcixcbiAgICAgICAgJjphY3RpdmUsXG4gICAgICAgICY6Zm9jdXMge1xuICAgICAgICAgIC5pY29uX3NvY21lZF9pY29uKCcuLi9pbWFnZXMvaWNvbi1mYWNlYm9vay5zdmcnLCBAZ2NfYTExeV9ncmVlbiApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAud2Vic2l0ZSxcbiAgICAgIC5vdGhlcixcbiAgICAgIC5wZXJzb25hbGxpbmsge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2ltYWdlcy9pY29uLXBlcnNvbmFsbGluay5wbmcnKTtcbiAgICAgICAgLmljb25fc29jbWVkX2ljb24oJy4uL2ltYWdlcy9pY29uLXBlcnNvbmFsbGluay5zdmcnLCBAZ2NfYmx1ZV9kYXJrZXN0KTtcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiAxOHB4IDE2cHg7XG5cbiAgICAgICAgJjpob3ZlcixcbiAgICAgICAgJjphY3RpdmUsXG4gICAgICAgICY6Zm9jdXMge1xuICAgICAgICAgIC5pY29uX3NvY21lZF9pY29uKCcuLi9pbWFnZXMvaWNvbi1wZXJzb25hbGxpbmsuc3ZnJywgQGdjX2ExMXlfZ3JlZW4gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLmxpbmtlZGluIHtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWFnZXMvaWNvbi1saW5rZWRpbi5wbmcnKTtcbiAgICAgICAgLmljb25fc29jbWVkX2ljb24oJy4uL2ltYWdlcy9pY29uLWxpbmtlZGluLnN2ZycsIEBnY19ibHVlX2Rhcmtlc3QpO1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDE4cHggMTdweDtcblxuICAgICAgICAmOmhvdmVyLFxuICAgICAgICAmOmFjdGl2ZSxcbiAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgLmljb25fc29jbWVkX2ljb24oJy4uL2ltYWdlcy9pY29uLWxpbmtlZGluLnN2ZycsIEBnY19hMTF5X2dyZWVuICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmN0YV9waWpsKEB3aWR0aCwgQGhlaWdodCwgQHJpZ2h0OiAwLCBAYm90dG9tOiAxZW0pIHtcbiAgY29udGVudDogJyAnO1xuICBib3JkZXI6IDJweCBzb2xpZCBAZ2NfYTExeV9ncmVlbjtcbiAgd2lkdGg6ICggQHdpZHRoICk7XG4gIGhlaWdodDogQGhlaWdodDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IEByaWdodDtcbiAgYm90dG9tOiBAYm90dG9tO1xuICBib3gtc2hhZG93OiAzcHggM3B4IDBweCByZ2JhKCMwMDAsIDAuMik7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnaW1hZ2VzL2N0YS1waWpsLnBuZycpO1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2ltYWdlcy9jdGEtcGlqbC5zdmcnKSwgbm9uZTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmV2ZW50LWhlYWRlci1pbmZvKCkge1xuXG5cbiAgaGVhZGVyIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgLm1ldGEge1xuICAgICAgcGFkZGluZy1ib3R0b206IDFlbTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAuZm9udHNpemUoMTIpO1xuXG4gICAgICBkaXYge1xuICAgICAgICBwYWRkaW5nOiAuMWVtIC40ZW0gLjFlbSAwO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IC42ZW07XG4gICAgICB9XG5cbiAgICAgIC5ldmVudGljb25zKCk7XG5cbiAgICB9XG4gIH1cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmZlYXR1cmVkaW1hZ2VfYmxvZ2FyY2hpdmUoQHdpZHRoOiBAaW1hZ2VibG9ja19tdywgQGhlaWdodDogQGltYWdlYmxvY2tfbXcpIHtcblxuICAuYXJjaGl2ZS1saXN0IC5lbnRyeSB7XG5cbiAgICBhIHtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBtaW4taGVpZ2h0OiAoIEBoZWlnaHQgKyAoIDIgKiBAcGFkZGluZyApICk7XG4gICAgfVxuICAgIC5ibG9naW5mbyB7XG4gICAgICBtYXJnaW4tbGVmdDogQHdpZHRoO1xuICAgICAgd2lkdGg6IH5cImNhbGMoMTAwJSAtIEB7d2lkdGh9KVwiO1xuICAgIH1cbiAgICAuZmVhdHVyZS1pbWFnZSB7XG4gICAgICB3aWR0aDogQHdpZHRoO1xuICAgICAgaGVpZ2h0OiBAaGVpZ2h0O1xuICAgIH1cbiAgfVxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4ucmFuZG9tX2JnX2ltYWdlcyhAaW1hZ2VfcG5nLCBAaW1hZ2Vfc3ZnKSB7XG5cbiAgLmZlYXR1cmUtaW1hZ2Uubm9pbWFnZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogQGdyb2VuXzQ7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCBAaW1hZ2VfcG5nICk7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCBAaW1hZ2Vfc3ZnICksIHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgICAyMGRlZyxcbiAgICAgICAgICAgIEBnY19hMTF5X2dyZWVuLFxuICAgICAgICAgICAgQGdjX2ExMXlfZ3JlZW4gNTBweCxcbiAgICAgICAgICAgIEBnY19hMTF5X2dyZWVuX2RhcmsgMjVweCxcbiAgICAgICAgICAgIEBnY19hMTF5X2dyZWVuX2RhcmsgMTIwcHhcbiAgICApO1xuICB9XG5cbiAgc2VjdGlvbjpudGgtY2hpbGQoM24rMykge1xuXG4gICAgLmZlYXR1cmUtaW1hZ2Uubm9pbWFnZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAZ3JvZW5fNDtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCggQGltYWdlX3BuZyApO1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCBAaW1hZ2Vfc3ZnICksIHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgICAgIDYwZGVnLFxuICAgICAgICAgICAgICBAZ2NfZGFya2JsdWUsXG4gICAgICAgICAgICAgIEBnY19kYXJrYmx1ZSA1MHB4LFxuICAgICAgICAgICAgICBsaWdodGVuKEBnY19kYXJrYmx1ZSwgMTAlKSAyNXB4LFxuICAgICAgICAgICAgICBsaWdodGVuKEBnY19kYXJrYmx1ZSwgMTAlKSAxMjBweFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgc2VjdGlvbjpudGgtY2hpbGQoNG4rNCkge1xuXG4gICAgLmZlYXR1cmUtaW1hZ2Uubm9pbWFnZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAZ3JvZW5fNDtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCggQGltYWdlX3BuZyApO1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCBAaW1hZ2Vfc3ZnICksIHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgICAgIDE1MGRlZyxcbiAgICAgICAgICAgICAgQHBhYXJzLFxuICAgICAgICAgICAgICBAcGFhcnMgNTBweCxcbiAgICAgICAgICAgICAgbGlnaHRlbihAcGFhcnMsIDEwJSkgMjVweCxcbiAgICAgICAgICAgICAgbGlnaHRlbihAcGFhcnMsIDEwJSkgMTIwcHhcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5lemVsc29vcnRqZSgpIHtcbiAgJjphZnRlciB7XG4gICAgLy8gZXplbHNvb3J0amVcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAtNzBweDtcbiAgICBjb250ZW50OiAnICc7XG4gICAgYmFja2dyb3VuZDogQGhvdmVyX3dpZGdldF90eHRfY29sb3I7XG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGhlaWdodDogNDBweDtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG4gIH1cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmJsb2diZXJpY2h0c2hhcmVkKCBAYmJzX21pbl9oZWlnaHQ6IDIwMHB4LCBAYmJzX3JlYWRtb3JlX3dpZHRoOiBAcmVhZG1vcmVfd2lkdGgsIEBiYnNfcmVhZG1vcmVfaGVpZ2h0OiBAcmVhZG1vcmVfaGVpZ2h0LCBAYmJzX2V4Y2VycHRfaGVpZ2h0OiA1MCApIHtcblxuICAuZm9udHNpemUoMTQpO1xuXG4gIHNlY3Rpb246aG92ZXIge1xuICAgIC5zdGFuZGFyZGJveHNoYWRvdygpO1xuICB9XG5cbiAgaGVhZGVyIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG5cbiAgLmVudHJ5IHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgIGEge1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgY29sb3I6IEB0eHRfZ3JpanM7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXG4gICAgICAmOmhvdmVyLFxuICAgICAgJjphY3RpdmUsXG4gICAgICAmOmZvY3VzIHtcbiAgICAgICAgLnN0YW5kYXJkYm94c2hhZG93KCk7XG4gICAgICAgIHotaW5kZXg6IDk5OTk7XG4gICAgICAgIGJvcmRlci1jb2xvcjogQHR4dDtcblxuICAgICAgICAuZW50cnktdGl0bGUsIC5leGNlcnB0LCAudGlqZGVucGxhYXRzIHtcbiAgICAgICAgICBjb2xvcjogQGhvdmVyX3dpZGdldF90eHRfY29sb3IgIWltcG9ydGFudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5kYXRlLWJhZGdlLFxuICAgICAgICAuZXhjZXJwdDphZnRlciB7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiBAaG92ZXJfd2lkZ2V0X3R4dF9jb2xvcjtcbiAgICAgICAgfVxuICAgICAgICAuZXhjZXJwdDphZnRlciB7XG4gICAgICAgICAgYm94LXNoYWRvdzogM3B4IDNweCAwcHggbGlnaHRlbihAdHh0X2dyaWpzLCAyMCUpO1xuICAgICAgICAgIC5pY29uX3NlcGFyYXRvcl9maWxsKCcuLi8uLi9pbWFnZXMvY3RhLXBpamwuc3ZnJywgQHR4dCk7XG4gICAgICAgIH1cbiAgICAgICAgLmV6ZWxzb29ydGplKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2VjdGlvbjpub3QoLmVub3JtLWh1Z2UpIHtcbiAgICBhIHtcbiAgICAgICY6aG92ZXIsXG4gICAgICAmOmFjdGl2ZSxcbiAgICAgICY6Zm9jdXMge1xuICAgICAgICBiYWNrZ3JvdW5kOiBAd2l0ICFpbXBvcnRhbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmV4Y2VycHQge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwYWRkaW5nLXJpZ2h0OiAoIEBiYnNfcmVhZG1vcmVfd2lkdGggKyBAcGFkZGluZyApO1xuICAgIG1pbi1oZWlnaHQ6IEBiYnNfZXhjZXJwdF9oZWlnaHQ7XG5cbiAgICAmOmFmdGVyIHtcbiAgICAgIC5jdGFfcGlqbChAYmJzX3JlYWRtb3JlX3dpZHRoLCBAYmJzX3JlYWRtb3JlX2hlaWdodCk7XG4gICAgfVxuICB9XG4gIC5ibG9naW5mbyB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBhZGRpbmc6IDAgMWVtO1xuICB9XG4gIC5mZWF0dXJlLWltYWdlIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2ltYWdlcy9mZWF0dXJlZC1pbWFnZS1kZWZhdWx0LnBuZycpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIH1cblxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uZGF0ZWJhZGdlKCkge1xuICAuZGF0ZS1iYWRnZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IEBwYWRkaW5nO1xuICAgIHRvcDogQHBhZGRpbmc7XG4gICAgYm9yZGVyLWNvbG9yOiBAd2l0O1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmF1dGhvcmJveF9jc3MoIEBiZ19jb2xvcjogQGxpY2h0Z3JpanMgKSB7XG5cbiAgLmF1dGhvci1ib3gge1xuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG5cblxuICAgIC5zb2NpYWwtbWVkaWEge1xuICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICBjbGVhcjogbm9uZTtcbiAgICAgIGxpIHtcbiAgICAgICAgbWFyZ2luOiAwIC44ZW0gLjVlbSAwO1xuICAgICAgICBhIHtcbiAgICAgICAgICAmLndlYnNpdGUsXG4gICAgICAgICAgJi5vdGhlcixcbiAgICAgICAgICAmLnBlcnNvbmFsbGluayxcbiAgICAgICAgICAmLmxpbmtlZGluLFxuICAgICAgICAgICYuZmFjZWJvb2ssXG4gICAgICAgICAgJi50d2l0dGVyLFxuICAgICAgICAgICYuc2xhY2ssXG4gICAgICAgICAgJi5lbWFpbCB7XG4gICAgICAgICAgICBoZWlnaHQ6IDIuNWVtO1xuICAgICAgICAgICAgd2lkdGg6IDIuNWVtO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC5iZy1jb2xvciB7XG4gICAgICBiYWNrZ3JvdW5kOiBAYmdfY29sb3I7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgcGFkZGluZzogQHBhZGRpbmc7XG4gICAgfVxuICAgIC5hdmF0YXIge1xuICAgICAgbWF4LWhlaWdodDogQGF2YXRhcjtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgbWFyZ2luOiAwO1xuICAgIH1cbiAgICAuYXV0aG9yLWJveC10aXRsZSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICBmbG9hdDogbGVmdDtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIHBhZGRpbmc6IDA7XG5cbiAgICAgIC5mb250c2l6ZSggQGZvbnRzaXplX3RpdGxlX2gyICk7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgZm9udC1mYW1pbHk6IEBoZWFkZXJmb250O1xuICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IEBwYWRkaW5nO1xuXG4gICAgICAmICsgcCB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgcGFkZGluZzogNnB4IDAgMCAwO1xuICAgICAgICBtYXJnaW46IDAgMCAwIDA7XG4gICAgICB9XG4gICAgfVxuICAgIC5hdXRob3ItaW5mbyB7XG4gICAgICBtYXJnaW4tbGVmdDogKCBAYXZhdGFyICsgQHBhZGRpbmcgKTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgfVxuICAgIGhyIHtcbiAgICAgIGNsZWFyOiBib3RoO1xuICAgICAgZmxvYXQ6IG5vbmU7XG4gICAgICBtYXJnaW46IDFlbSAwO1xuICAgICAgYm9yZGVyOiAwO1xuICAgICAgaGVpZ2h0OiAycHg7XG4gICAgICBiYWNrZ3JvdW5kOiBAYm9yZGVyX2dyaWpzO1xuICAgIH1cbiAgICBhIHtcbiAgICAgIHBhZGRpbmc6IC41ZW0gMDtcbiAgICAgIC5mb250c2l6ZSgxMik7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cbiAgICAgICY6aG92ZXIsXG4gICAgICAmOmFjdGl2ZSxcbiAgICAgICY6Zm9jdXMge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICAgIH1cbiAgICB9XG4gICAgYVtocmVmKj1cIm1haWx0bzpcIl0ge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogQGdjX2RhcmtibHVlO1xuICAgICAgcGFkZGluZy1sZWZ0OiAxZW07XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAxZW07XG4gICAgICBjb2xvcjogQHdpdDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG5cblxuXG4gICAgYVtocmVmKj1cIm1haWx0bzpcIl0sXG4gICAgYVtocmVmKj1cInRlbDpcIl0ge1xuICAgICAgJjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgaGVpZ2h0OiAxMHB4O1xuICAgICAgICB3aWR0aDogMTNweDtcbiAgICAgICAgbWFyZ2luLXRvcDogNHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiByZWQgdXJsKCcuLi9pbWFnZXMvaWNvbi1tYWlsLnBuZycpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyO1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2ltYWdlcy9pY29uLW1haWwuc3ZnJyksIG5vbmU7XG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcbiAgICAgIH1cbiAgICB9XG4gICAgYVtocmVmKj1cIm1haWx0bzpcIl0ge1xuICAgICAgJjpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJy4uL2ltYWdlcy9pY29uLW1haWwucG5nJykgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXI7XG4gICAgICAgIC5pY29uX3JlcGxhY2VfZmlsbGVyKCcuLi9pbWFnZXMvaWNvbi1tYWlsLnN2ZycsICcjRkZGRkZGJywgQHdpdCk7XG4gICAgICAgIGhlaWdodDogMTJweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYVtocmVmKj1cInRlbDpcIl0ge1xuICAgICAgJjpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJy4uL2ltYWdlcy9pY29uLXBob25lLnBuZycpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyO1xuICAgICAgICAuaWNvbl9yZXBsYWNlX2ZpbGxlcignLi4vaW1hZ2VzL2ljb24tcGhvbmUuc3ZnJywgQGdjX2RhcmtibHVlLCBAdHh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhLm1vcmUge1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgd2lkdGg6IDM2cHg7XG4gICAgICBoZWlnaHQ6IDM2cHg7XG5cbiAgICAgICY6YWZ0ZXIge1xuICAgICAgICAuY3RhX3BpamwoQHJlYWRtb3JlX3dpZHRoLCAyNnB4LCAycHgsIDJweCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uYXV0aG9yYm94X2Nzc19waWpsX2JvdHRvbSggQGJnX2NvbG9yOiBAbGljaHRncmlqcyApIHtcblxuICAuYXV0aG9yYm94X2NzcyggQGJnX2NvbG9yICk7XG5cbiAgLmF1dGhvci1ib3gge1xuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgICBtYXJnaW46IDJlbSAwO1xuXG4gICAgLmJnLWNvbG9yIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IEBwaWpsdGplO1xuICAgIH1cblxuICAgICY6YWZ0ZXIge1xuICAgICAgY29udGVudDogJyAnO1xuICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICB3aWR0aDogMXB4O1xuICAgICAgaGVpZ2h0OiAxcHg7XG5cbiAgICAgIGJvcmRlci1ib3R0b206IEBwaWpsdGplIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLXRvcDogQHBpamx0amUgc29saWQgQGJnX2NvbG9yO1xuICAgICAgYm9yZGVyLXJpZ2h0OiBAcGlqbHRqZSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgIGJvcmRlci1sZWZ0OiBAcGlqbHRqZSBzb2xpZCB0cmFuc3BhcmVudDtcblxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiAwO1xuICAgICAgbGVmdDogKCAxLjMgKiBAcGlqbHRqZSk7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoIC0xICogQHRyYW5zZm9ybSApO1xuICAgIH1cbiAgfVxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uYXV0aG9yYm94X2Nzc19waWpsX3RvcCggQGJnX2NvbG9yOiBAbGljaHRncmlqcyApIHtcblxuICAuYXV0aG9yYm94X2NzcyggQGJnX2NvbG9yICk7XG5cblxuICAuYXV0aG9yLWJveCB7XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgIC5iZy1jb2xvciB7XG4gICAgICBtYXJnaW4tdG9wOiBAcGlqbHRqZTtcbiAgICB9XG5cbiAgICAmOmJlZm9yZSB7XG4gICAgICBjb250ZW50OiAnICc7XG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgIHdpZHRoOiAxcHg7XG4gICAgICBoZWlnaHQ6IDFweDtcblxuICAgICAgYm9yZGVyLXRvcDogQHBpamx0amUgc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXItcmlnaHQ6IEBwaWpsdGplIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLWxlZnQ6IEBwaWpsdGplIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLWJvdHRvbTogQHBpamx0amUgc29saWQgQGJnX2NvbG9yO1xuXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDA7XG4gICAgICBsZWZ0OiAoIDEuMyAqIEBwaWpsdGplKTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSggQHRyYW5zZm9ybSApO1xuICAgIH1cbiAgfVxuXG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5jYWxsdG9hY3Rpb25zdHlsaW5nKCkge1xuXG4gIGEuY3RhIHtcbiAgICAua25vcHBpZnkoIHRyYW5zcGFyZW50LCBAZ2NfYTExeV9ncmVlbl9kYXJrLCBAZ2NfYTExeV9ncmVlbl9kYXJrZXIsIEBnY19hMTF5X2dyZWVuLCBAd2l0LCAyNCwgMCk7XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIH1cblxuICBAY2FsbF90b19hY3Rpb25fMm5kX2xpbmtfYWNodGVyZ3JvbmQ6ICAgICAgICAgICBkYXJrZW4oIEB3aXQsIDEwJSApO1xuICBAY2FsbF90b19hY3Rpb25fMm5kX2xpbmtfc2NoYWR1dzogICAgICAgICAgICAgICBkYXJrZW4oIEBjYWxsX3RvX2FjdGlvbl8ybmRfbGlua19hY2h0ZXJncm9uZCwgMjAlICk7XG4gIEBjYWxsX3RvX2FjdGlvbl8ybmRfbGlua19waWpsdGplX2FjaHRlcmdyb25kOiAgIEBsaWdodF9ncmF5O1xuICBAY2FsbF90b19hY3Rpb25fMm5kX2xpbmtfY29sb3I6ICAgICAgICAgICAgICAgICBAdHh0O1xuICBAY2FsbF90b19hY3Rpb25fMm5kX2JnOiAgICAgICAgICAgICAgICAgICAgICAgICBAZ2NfZ3JleWJsdWU7XG4gIEBjYWxsX3RvX2FjdGlvbl8ybmRfYm9yZGVyOiAgICAgICAgICAgICAgICAgICAgIEBjYWxsX3RvX2FjdGlvbl8ybmRfbGlua19waWpsdGplX2FjaHRlcmdyb25kO1xuXG4gIEBjYWxsX3RvX2FjdGlvbl9saW5rX2FjaHRlcmdyb25kOiAgICAgICAgICAgXHQgIEBnY19hMTF5X2dyZWVuOyAvL3dhYXJvbSAtd2Vlci0ga2xldXJlbiBkZWZpbmllcmVuIGhpZXI/XG4gIEBjYWxsX3RvX2FjdGlvbl9saW5rX3NjaGFkdXc6ICAgICAgICAgICAgICAgXHQjMDA4MzJBO1xuICBAY2FsbF90b19hY3Rpb25fbGlua19waWpsdGplX2FjaHRlcmdyb25kOiAgIFx0IzBDQTEzQjtcbiAgQGNhbGxfdG9fYWN0aW9uX2xpbmtfY29sb3I6ICAgICAgICAgICAgICAgICBcdEB3aXQ7XG5cbiAgQGNhbGxfdG9fYWN0aW9uX2JnOiAgICAgICAgICAgICAgICAgICAgICAgICBcdEB3aXQ7XG4gIEBjYWxsX3RvX2FjdGlvbl9jb2xvcjogICAgICAgICAgICAgICAgICAgICAgXHRAdHh0O1xuICBAY2FsbF90b19hY3Rpb25fYm9yZGVyOiAgICAgICAgICAgICAgICAgICAgIFx0QGdjX2dyZXlibHVlO1xuXG5cbiAgLmNhbGwtdG8tYWN0aW9uIHtcbiAgICBiYWNrZ3JvdW5kOiBAY2FsbF90b19hY3Rpb25fYmc7XG4gICAgYm9yZGVyOiAxcHggc29saWQgQGNhbGxfdG9fYWN0aW9uX2JvcmRlcjtcblxuICAgIGJhY2tncm91bmQ6IEBoZWVsZXJnbGljaHRncmlqcztcbiAgICBib3JkZXItY29sb3I6IEBoZWVsZXJnbGljaHRncmlqcztcblxuICAgIHBhZGRpbmc6IDFlbTtcbiAgICBtYXJnaW46IDAgMCAxZW0gMDtcbiAgICBjb2xvcjogQGNhbGxfdG9fYWN0aW9uX2NvbG9yO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgICBwIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAmICsgcCB7XG4gICAgICAgIG1hcmdpbi10b3A6IDFlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhLCBwLCBoMiwgaDMsIGg0LCBoNSwgaDYge1xuICAgICAgY29sb3I6IEBjYWxsX3RvX2FjdGlvbl9jb2xvcjtcbiAgICB9XG5cblxuICAgIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgbWFyZ2luOiAwO1xuICAgIH1cbiAgfVxuXG4gIC5jYWxsLXRvLWFjdGlvbi5zZWNvbmRhcnkge1xuICAgIGJhY2tncm91bmQ6IEBoZWVsZXJnbGljaHRncmlqcztcbiAgICBib3JkZXItY29sb3I6IEBoZWVsZXJnbGljaHRncmlqcztcblxuICAgIGEuY3RhIHtcbiAgICAgIC5rbm9wcGlmeSh0cmFuc3BhcmVudCwgQGNhbGxfdG9fYWN0aW9uXzJuZF9saW5rX3NjaGFkdXcsIEBjYWxsX3RvX2FjdGlvbl8ybmRfbGlua19waWpsdGplX2FjaHRlcmdyb25kLCBAY2FsbF90b19hY3Rpb25fMm5kX2xpbmtfYWNodGVyZ3JvbmQsIEBjYWxsX3RvX2FjdGlvbl8ybmRfbGlua19jb2xvciwgMjQsIDAsIEBjYWxsX3RvX2FjdGlvbl8ybmRfbGlua19jb2xvcik7XG4gICAgfVxuICB9XG5cblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IEBicmVha190YWJsZXQgKSB7XG4gICAgLmNhbGwtdG8tYWN0aW9uLmZsb2F0cmlnaHQge1xuICAgICAgbWF4LXdpZHRoOiA1MCU7XG4gICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICBtYXJnaW4tbGVmdDogMWVtO1xuXG4gICAgICBhLmN0YSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICBjbGVhcjogYm90aDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uc2hvd19zdWJtZW51KCkge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgYSB7XG4gICAgYm9yZGVyLWNvbG9yOiBAYV9tZW51X2hvdmVyX2JvcmRlcjtcbiAgfVxuXG4gICYgPiAuc3ViLW1lbnUge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgbGVmdDogMDtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICB9XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5nYy1wYWRkaW5nKCkge1xuXHRwYWRkaW5nLWxlZnQ6IDEuNXJlbTtcblx0cGFkZGluZy1yaWdodDogMS41cmVtO1xuXHRcblx0QG1lZGlhIEBkZXNrdG9wIHtcblx0XHRwYWRkaW5nLWxlZnQ6IDNyZW07XG5cdFx0cGFkZGluZy1yaWdodDogM3JlbTtcblx0fVxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4uZ2MtcmV2ZXJzZS1wYWRkaW5nKCkgeyAvLyBveSwgZWVuIG1peCBpcyBoZXJrZW5iYWFyIGFhbiBkZSBoYWFramVzLi4uXG5cdG1hcmdpbi1sZWZ0OiAtMS41cmVtO1xuXHRtYXJnaW4tcmlnaHQ6IC0xLjVyZW07XG5cdFxuXHRAbWVkaWEgQGJyZWFrX2Z1bGx3aWR0aCB7XG5cdFx0bWFyZ2luLWxlZnQ6IC0zcmVtO1xuXHRcdG1hcmdpbi1yaWdodDogLTNyZW07XG5cdH1cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLmdjLWJveC1zaGFkb3coKSB7XG5cdGJveC1zaGFkb3c6IDRweCA0cHggMCByZ2JhKCMwMDAsIDAuMSk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi5nYy1zZWN0aW9uLWhlYWRpbmcoKSB7XG4gIC5mb250LXNpemUoMzIpO1xuICBmb250LWZhbWlseTogQGZvbnRfc2Vjb25kYXJ5O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogMzZweDtcblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kICggbWluLXdpZHRoOiBAYnJlYWtfZnVsbHdpZHRoICkge1xuICAgIC5mb250LXNpemUoNDIpO1xuICAgIGxpbmUtaGVpZ2h0OiA0NHB4O1xuICB9XG59XG5cbi5nYy1jb250ZW50LWNvbnRhaW5lcigpIHtcbiAgbWF4LXdpZHRoOiBAbWF4LXdpZHRoLWNvbnRlbnQ7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG59XG5cbi5nYy1mb250LXNtYWxsKCkge1xuICBmb250LXNpemU6IDE1cHg7XG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xufVxuXG4uZ2MtaGVhZGluZy0xKCkge1xuICAuZm9udC1zaXplKDQwKTtcblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kICggbWluLXdpZHRoOiBAYnJlYWtfdGFibGV0ICkge1xuICAgIC5mb250LXNpemUoNDApO1xuICAgIGxpbmUtaGVpZ2h0OiA0OHB4O1xuICB9XG5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAoIG1pbi13aWR0aDogQGJyZWFrX2Z1bGx3aWR0aCApIHtcbiAgICAuZm9udC1zaXplKDY4KTtcbiAgICBsaW5lLWhlaWdodDogNzZweDtcbiAgfVxufVxuLmdjLXJvdGF0ZWQtdGhpbmcoKSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDEwMCU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHotaW5kZXg6IDU7XG5cbiAgJjpiZWZvcmUge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBiYWNrZ3JvdW5kOiBAd2hpdGU7XG4gICAgc3BlYWs6IG5vbmU7XG4gICAgaGVpZ2h0OiA1cmVtO1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMTAlO1xuICAgIG1hcmdpbi10b3A6IC0ycmVtO1xuICAgIG1hcmdpbi1sZWZ0OiAtMnJlbTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgyZGVnKTtcbiAgfVxufSJdfQ== */
